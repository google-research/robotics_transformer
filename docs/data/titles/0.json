{
    "/README.md": "Efficient Transformer for Robotic Control",
    "/README.md:1-40": "Robotics Transformer Toolkit",
    "/README.md:41-54": "Robotics Transformer Library: RT-1 Model",
    "/__init__.py": "Setting Robotics Transformer Library Version",
    "/configs/transformer_mixin.gin": "Robotics Transformer Actor-Critic Model Configuration",
    "/film_efficientnet/__init__.py": "Apache License Notice",
    "/film_efficientnet/film_conditioning_layer.py": "Deep Learning Film Conditioning Layer",
    "/film_efficientnet/film_conditioning_layer.py:1-30": "FiLM Conditioning Layer Definition",
    "/film_efficientnet/film_conditioning_layer.py:31-62": "Film Conditioning Layer with Dense Channels",
    "/film_efficientnet/film_conditioning_layer.py:64-74": "Conditional Film Transformations for EfficientNet",
    "/film_efficientnet/film_conditioning_layer_test.py": "Testing Film Conditioning Layer in Robotics Transformer",
    "/film_efficientnet/film_conditioning_layer_test.py:1-28": "Testing FilmConditioningLayer Behavior",
    "/film_efficientnet/film_conditioning_layer_test.py:29-40": "Film Conditioning Layer Test",
    "/film_efficientnet/film_efficientnet_encoder.py": "EfficientNet Models for Image Classification",
    "/film_efficientnet/film_efficientnet_encoder.py:1-34": "Film EfficientNet Encoder",
    "/film_efficientnet/film_efficientnet_encoder.py:135-156": "EfficientNet Image Classification Encoder",
    "/film_efficientnet/film_efficientnet_encoder.py:157-177": "EfficientNet Encoder Parameters",
    "/film_efficientnet/film_efficientnet_encoder.py:178-210": "Pretrained Weights Compatibility Check",
    "/film_efficientnet/film_efficientnet_encoder.py:211-239": "Correct Convolutional Padding",
    "/film_efficientnet/film_efficientnet_encoder.py:240-265": "Input Shape Validator Function",
    "/film_efficientnet/film_efficientnet_encoder.py:266-289": "EfficientNet Shape and Weight Validator",
    "/film_efficientnet/film_efficientnet_encoder.py:290-310": "Input Shape Validation in EfficientNet Encoder",
    "/film_efficientnet/film_efficientnet_encoder.py:311-336": "Input Shape Validation",
    "/film_efficientnet/film_efficientnet_encoder.py:337-361": "EfficientNet Customization Function",
    "/film_efficientnet/film_efficientnet_encoder.py:35-84": "Defining EfficientNet Encoder Paths",
    "/film_efficientnet/film_efficientnet_encoder.py:362-377": "Efficient Film Encoder Model",
    "/film_efficientnet/film_efficientnet_encoder.py:378-401": "EfficientNet Model with Film Conditioning",
    "/film_efficientnet/film_efficientnet_encoder.py:402-430": "EfficientNet Model Initialization",
    "/film_efficientnet/film_efficientnet_encoder.py:431-453": "EfficientNet Filter Rounding",
    "/film_efficientnet/film_efficientnet_encoder.py:454-482": "EfficientNet Model Initialization",
    "/film_efficientnet/film_efficientnet_encoder.py:483-513": "EfficientNet Encoder with Film Conditioning",
    "/film_efficientnet/film_efficientnet_encoder.py:514-547": "Dense Layer Model Creation",
    "/film_efficientnet/film_efficientnet_encoder.py:548-580": "Inverted Residual Block Function",
    "/film_efficientnet/film_efficientnet_encoder.py:582-617": "Squeeze-and-Excitation Depthwise CNN",
    "/film_efficientnet/film_efficientnet_encoder.py:618-653": "Spatial Recalibration in EfficientNet Encoder",
    "/film_efficientnet/film_efficientnet_encoder.py:654-683": "Film EfficientNet Dropout Models",
    "/film_efficientnet/film_efficientnet_encoder.py:684-713": "EfficientNet Layer Weights Assigner",
    "/film_efficientnet/film_efficientnet_encoder.py:714-740": "EfficientNetB3 Model with Custom Options",
    "/film_efficientnet/film_efficientnet_encoder.py:742-759": "Sorting and Storing Top Predictions",
    "/film_efficientnet/film_efficientnet_encoder.py:85-133": "EfficientNet Model Architecture in Keras",
    "/film_efficientnet/film_efficientnet_encoder_test.py": "EfficientNet for Cat Detection",
    "/film_efficientnet/film_efficientnet_encoder_test.py:1-28": "EfficientNet Cat Detection Test",
    "/film_efficientnet/film_efficientnet_encoder_test.py:29-57": "EfficientNet Model Variant Selector and Resizer",
    "/film_efficientnet/film_efficientnet_encoder_test.py:58-73": "EfficientNet Encoder Test: Keras vs. TF Equivalence",
    "/film_efficientnet/preprocessors.py": "EfficientNet Preprocessing",
    "/film_efficientnet/preprocessors.py:1-29": "EfficientNet Image Preprocessing",
    "/film_efficientnet/preprocessors.py:108-108": "Preprocessed Images Returned",
    "/film_efficientnet/preprocessors.py:30-55": "EfficientNet Preprocessors: Image Cropping and Conversion",
    "/film_efficientnet/preprocessors.py:56-85": "Image Dimension Consistency Preprocessor",
    "/film_efficientnet/preprocessors.py:86-107": "Random Cropping Preprocessor",
    "/film_efficientnet/preprocessors_test.py": "EfficientNet Preprocessor Test",
    "/film_efficientnet/preprocessors_test.py:1-29": "Film EfficientNet Preprocessor Test Module",
    "/film_efficientnet/preprocessors_test.py:30-54": "EfficientNet Image Preprocessor Test",
    "/film_efficientnet/preprocessors_test.py:55-77": "Test Suite for Image Preprocessor",
    "/film_efficientnet/preprocessors_test.py:78-83": "EfficientNet Image Array Difference",
    "/film_efficientnet/pretrained_efficientnet_encoder.py": "Pretrained EfficientNet Encoder for Film",
    "/film_efficientnet/pretrained_efficientnet_encoder.py:1-34": "EfficientNet Encoder for Feature Extraction",
    "/film_efficientnet/pretrained_efficientnet_encoder.py:108-122": "Pretrained EfficientNet Encoder Function",
    "/film_efficientnet/pretrained_efficientnet_encoder.py:36-57": "Customizable Pretrained EfficientNet Encoder",
    "/film_efficientnet/pretrained_efficientnet_encoder.py:58-84": "EfficientNetEncoder: Film-Conditioned Pretrained Model",
    "/film_efficientnet/pretrained_efficientnet_encoder.py:85-107": "EfficientNet Encoder for Image Processing",
    "/film_efficientnet/pretrained_efficientnet_encoder_test.py": "Testing EfficientNet Encoder with Cat Image",
    "/film_efficientnet/pretrained_efficientnet_encoder_test.py:1-27": "Pretrained EfficientNet Encoder Test",
    "/film_efficientnet/pretrained_efficientnet_encoder_test.py:28-49": "EfficientNet Tabby Cat Classification",
    "/requirements.txt": "Robotics Transformer Dependencies",
    "/sequence_agent.py": "Sequence Agent & RL Training",
    "/sequence_agent.py:1-26": "Sequence Policy and Agent in Sequence_agent.py",
    "/sequence_agent.py:115-140": "Training Actor Network with Experience and Weights",
    "/sequence_agent.py:141-164": "Gradient Applier for Reinforcement Learning Agent",
    "/sequence_agent.py:165-171": "Actor Loss Calculation",
    "/sequence_agent.py:27-60": "Sequence Policy Class",
    "/sequence_agent.py:61-86": "Sequence Agent: TF-Agent Extension",
    "/sequence_agent.py:87-114": "Sequence Agent Initialization and Policies",
    "/sequence_agent_test.py": "Testing SequenceAgent with tf_agents Library",
    "/sequence_agent_test_set_up.py": "Setting Up Sequence Agent Tests",
    "/sequence_agent_test_set_up.py:1-28": "Setting Up Sequence Agent Tests",
    "/sequence_agent_test_set_up.py:119-144": "Saving Agent Policy in Test Set Up",
    "/sequence_agent_test_set_up.py:30-67": "Robotic Transformer Actor Agent",
    "/sequence_agent_test_set_up.py:68-97": "SequenceAgent Test Setup",
    "/sequence_agent_test_set_up.py:98-118": "Sequence Agent Test Environment Setup",
    "/tokenizers/__init__.py": "Apache License Notice for Tokenizers",
    "/tokenizers/action_tokenizer.py": "Action Tokenization in Robotics Transformer Library",
    "/tokenizers/action_tokenizer.py:1-25": "Action Tokenizer: Robotics Transformer 1",
    "/tokenizers/action_tokenizer.py:108-127": "Action Tokenizer Algorithm",
    "/tokenizers/action_tokenizer.py:129-151": "Action Detokenizer Function",
    "/tokenizers/action_tokenizer.py:152-157": "Action Tokenizer: Normalization and Concatenation",
    "/tokenizers/action_tokenizer.py:27-52": "Action Tokenizer: Vocabulary-based Action Tokenization",
    "/tokenizers/action_tokenizer.py:53-78": "Action Tokenizer Initialization",
    "/tokenizers/action_tokenizer.py:79-107": "Action Tokenizer Validation",
    "/tokenizers/action_tokenizer_test.py": "Action Tokenizer Test Accuracy",
    "/tokenizers/action_tokenizer_test.py:1-27": "Action Tokenizer Test: Int32 Action Specification",
    "/tokenizers/action_tokenizer_test.py:111-143": "Action Tokenizer Test: Equality and Vocabulary Size Validation",
    "/tokenizers/action_tokenizer_test.py:144-170": "Action Tokenizer Test Accuracy",
    "/tokenizers/action_tokenizer_test.py:171-191": "Random Action Tokenization in Robotics Test",
    "/tokenizers/action_tokenizer_test.py:28-47": "Action Tokenizer Test Cases",
    "/tokenizers/action_tokenizer_test.py:48-64": "Action Tokenizer Test: Detokenization and OOV Confirmation",
    "/tokenizers/action_tokenizer_test.py:65-84": "Action Tokenizer Test: Correct Shape Assertion",
    "/tokenizers/action_tokenizer_test.py:85-110": "Testing Action Tokenizer Boundaries",
    "/tokenizers/image_tokenizer.py": "EfficientNet Image Tokenizer",
    "/tokenizers/image_tokenizer.py:1-27": "EfficientNet-Based Image Tokenizer",
    "/tokenizers/image_tokenizer.py:28-60": "ImageTokenizer: EfficientNet-Based Image Tokenization",
    "/tokenizers/image_tokenizer.py:61-89": "Image Reshaping and Tokenization Function",
    "/tokenizers/image_tokenizer.py:90-112": "Image Tokenizer Embeddings",
    "/tokenizers/image_tokenizer_test.py": "Image Tokenizer Test: Generating Tokens and Validating Outputs",
    "/tokenizers/image_tokenizer_test.py:1-26": "Image Tokenizer Test: Robotics Transformer Library",
    "/tokenizers/image_tokenizer_test.py:27-46": "Image Tokenizer Test: Shape Assertion",
    "/tokenizers/token_learner.py": "TensorFlow Token Learner Implementation",
    "/tokenizers/token_learner.py:1-30": "TensorFlow Token Learner Implementation",
    "/tokenizers/token_learner.py:118-128": "Feature Extraction Token Learner",
    "/tokenizers/token_learner.py:31-58": "MLP Transformer Block Creation",
    "/tokenizers/token_learner.py:59-84": "Token Learner Layer Initialization",
    "/tokenizers/token_learner.py:85-116": "TokenLearnerModule: Transformer MlpBlock and Layer Normalization",
    "/tokenizers/token_learner_test.py": "TokenLearner Test: Robotics Transformer Embedding",
    "/tokenizers/token_learner_test.py:1-29": "TokenLearnerTest: Testing Tokenizers in Robotics Transformer",
    "/tokenizers/token_learner_test.py:31-37": "Token Learner Test: Shape Matching",
    "/transformer.py": "Configurable Transformer Layer with Multi-Head Attention",
    "/transformer.py:1-32": "Transformer Layer Definition",
    "/transformer.py:118-143": "Transformer Model Initialization and Call Function",
    "/transformer.py:144-169": "Transformer Model with Attention and Embeddings",
    "/transformer.py:33-57": "Multi-Head Attention Transformer Layer",
    "/transformer.py:58-85": "Multi-Head Attention Layer for Transformers",
    "/transformer.py:86-117": "Decoder Only Transformer Class",
    "/transformer_network.py": "Transformer Network for Robotics",
    "/transformer_network.py:1-27": "Sequence Model Training with TensorFlow",
    "/transformer_network.py:104-129": "Transformer Network Initialization and Setup",
    "/transformer_network.py:130-154": "Transformer Network for Robotics Tasks",
    "/transformer_network.py:156-184": "Action Index and Mask Generation in Transformer Network",
    "/transformer_network.py:185-207": "Transformer Network for Robotics: Action Masks and Look Ahead Masking",
    "/transformer_network.py:208-237": "Attention-masked Transformer Function",
    "/transformer_network.py:238-263": "Transformer Network for Images and Actions",
    "/transformer_network.py:264-291": "Transformer Network for Observations",
    "/transformer_network.py:28-58": "Transformer Actor Network Definition",
    "/transformer_network.py:292-314": "Transformer Network Prediction Loop",
    "/transformer_network.py:315-337": "Action Token Concatenation",
    "/transformer_network.py:338-356": "Transformer Network Robotics State Update",
    "/transformer_network.py:357-383": "Transformer Forward Pass: Action Prediction",
    "/transformer_network.py:384-413": "Transformer Network Robotics Action Loss",
    "/transformer_network.py:414-437": "Tracking Transformer Network Parameters and Images",
    "/transformer_network.py:438-459": "Attention-Aware Transformer Logging",
    "/transformer_network.py:460-479": "Spatial Attention Transformer Visualization",
    "/transformer_network.py:480-500": "Attention Visualizer: Transformer Network Py Code",
    "/transformer_network.py:501-521": "Accuracy Tracking for Transformer Network",
    "/transformer_network.py:522-548": "Token Accuracy and Loss Tracking",
    "/transformer_network.py:549-575": "Image Tokenization Function",
    "/transformer_network.py:576-597": "Reshape and Prepare Images for Transformer Input",
    "/transformer_network.py:59-76": "Training Transformer Network: Specs and Details",
    "/transformer_network.py:598-618": "Image Tokenization and Action Shifting",
    "/transformer_network.py:619-644": "Assemble Action Tokens into Input Sequence",
    "/transformer_network.py:645-669": "Three Functions for Transformer Network",
    "/transformer_network.py:670-684": "Transformer Network Dimension Analysis Functions",
    "/transformer_network.py:77-103": "Transformer Network Initialization",
    "/transformer_network_test.py": "Transformer Network Testing Framework",
    "/transformer_network_test.py:1-22": "Transformer Network Test File",
    "/transformer_network_test.py:100-127": "Transformer Network Initialization and Testing",
    "/transformer_network_test.py:128-152": "Transformer Network Testing: Input-Output Specifications",
    "/transformer_network_test.py:153-177": "Transformer Network Image and Action Tokenization",
    "/transformer_network_test.py:178-200": "Future-Input Independence Test",
    "/transformer_network_test.py:202-228": "Testing Loss Masks in Agent",
    "/transformer_network_test.py:229-229": "Invoking TensorFlow Test Functions",
    "/transformer_network_test.py:23-46": "Transformer Network Testing: Train Loss Call",
    "/transformer_network_test.py:47-72": "Transformer Network Testing: Inference and Loss",
    "/transformer_network_test.py:73-99": "Transformer Network Testing and Evaluation",
    "/transformer_network_test_set_up.py": "Transformer Network Test Setup",
    "/transformer_network_test_set_up.py:1-30": "Transformer Test Setup",
    "/transformer_network_test_set_up.py:119-143": "Setting Up Image Processing Transformer",
    "/transformer_network_test_set_up.py:144-166": "Transformer Network Test Utilities",
    "/transformer_network_test_set_up.py:167-196": "Robotics Transformer Network Specifications",
    "/transformer_network_test_set_up.py:197-223": "Robotics Transformer Network Data Types Defined",
    "/transformer_network_test_set_up.py:224-252": "Transformer Network Test Data Setup",
    "/transformer_network_test_set_up.py:253-279": "Training Action Setup for Transformer Network",
    "/transformer_network_test_set_up.py:280-306": "Transformer Network Test Setup",
    "/transformer_network_test_set_up.py:307-335": "Transformer Network Token Reshaping",
    "/transformer_network_test_set_up.py:31-55": "Defining Spec Types and Constants",
    "/transformer_network_test_set_up.py:336-359": "Transformer Network Test Environment Setup",
    "/transformer_network_test_set_up.py:360-379": "Transformer Network Action Dimension Test",
    "/transformer_network_test_set_up.py:380-391": "Updating Output Tokens with Action Logits",
    "/transformer_network_test_set_up.py:56-89": "Transformer Network Setup and Observations",
    "/transformer_network_test_set_up.py:90-118": "FakeImageTokenizer Setup",
    "/transformer_test.py": "Transformer Test in Robotics",
    "/transformer_test.py:1-32": "Robotic Transformer Model Testing",
    "/transformer_test.py:34-55": "Testing Transformer Forward Pass with Attention"
}