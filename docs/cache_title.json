{"_default": {"1": {"path": "/README.md", "hash": "8ee463f72e7e4d54f3bdfdbb9216a3d8", "title": "Efficient Transformer for Robotic Control"}, "2": {"path": "/README.md:1-40", "hash": "88dfc954571102d60b84baad50dc1e6c", "title": "Robotics Transformer Toolkit"}, "3": {"path": "/README.md:41-54", "hash": "c4b3ef3ad1de0d97bec87a14bfa4d182", "title": "Robotics Transformer Library: RT-1 Model"}, "4": {"path": "/__init__.py", "hash": "c4d4e1822480cfe92fb17768ab9b9055", "title": "Setting Robotics Transformer Library Version"}, "5": {"path": "/configs/transformer_mixin.gin", "hash": "2632cba653c9cabf656640719cdc5ce6", "title": "Robotics Transformer Actor-Critic Model Configuration"}, "6": {"path": "/film_efficientnet/__init__.py", "hash": "8f07debfd5331809909e55b593ea5331", "title": "Apache License Notice"}, "7": {"path": "/film_efficientnet/film_conditioning_layer.py", "hash": "38e4feb5f792473dda46fc8d68746b8b", "title": "Deep Learning Film Conditioning Layer"}, "8": {"path": "/film_efficientnet/film_conditioning_layer.py:1-30", "hash": "4b7f2e6c1f7e16693397e3190a0f9458", "title": "FiLM Conditioning Layer Definition"}, "9": {"path": "/film_efficientnet/film_conditioning_layer.py:31-62", "hash": "271980daf5ad64506bf931aabffe0c29", "title": "Film Conditioning Layer with Dense Channels"}, "10": {"path": "/film_efficientnet/film_conditioning_layer.py:64-74", "hash": "2fe5bb2b3fe5d02b42d864b013fdb1c2", "title": "Conditional Film Transformations for EfficientNet"}, "11": {"path": "/film_efficientnet/film_conditioning_layer_test.py", "hash": "006c7806818510153148219de9143c64", "title": "Testing Film Conditioning Layer in Robotics Transformer"}, "12": {"path": "/film_efficientnet/film_conditioning_layer_test.py:1-28", "hash": "31a4c0ebd756417ca16efac52da014e0", "title": "Testing FilmConditioningLayer Behavior"}, "13": {"path": "/film_efficientnet/film_conditioning_layer_test.py:29-40", "hash": "a784caf2f865120cdc1f1e1a08e4ab95", "title": "Film Conditioning Layer Test"}, "14": {"path": "/film_efficientnet/film_efficientnet_encoder.py", "hash": "0beda19acd78c96e05da4af8ec3a2afb", "title": "EfficientNet Models for Image Classification"}, "15": {"path": "/film_efficientnet/film_efficientnet_encoder.py:1-34", "hash": "5eaad86caac7f6bbd924c272108e372f", "title": "Film EfficientNet Encoder"}, "16": {"path": "/film_efficientnet/film_efficientnet_encoder.py:35-84", "hash": "97ccc206f535217a5613020de25139cb", "title": "Defining EfficientNet Encoder Paths"}, "17": {"path": "/film_efficientnet/film_efficientnet_encoder.py:85-133", "hash": "d7a4df84ff3356bc7e5ea599385d5cba", "title": "EfficientNet Model Architecture in Keras"}, "18": {"path": "/film_efficientnet/film_efficientnet_encoder.py:135-156", "hash": "a2be3972099a1dd58c8fe3d7b0422dc9", "title": "EfficientNet Image Classification Encoder"}, "19": {"path": "/film_efficientnet/film_efficientnet_encoder.py:157-177", "hash": "9fe3eda73ed9c962350d19196e08eb29", "title": "EfficientNet Encoder Parameters"}, "20": {"path": "/film_efficientnet/film_efficientnet_encoder.py:178-210", "hash": "deba5dc3124703e136ce19ec86ef701c", "title": "Pretrained Weights Compatibility Check"}, "21": {"path": "/film_efficientnet/film_efficientnet_encoder.py:211-239", "hash": "f7218b37d5d7bf30967721a3e8be5827", "title": "Correct Convolutional Padding"}, "22": {"path": "/film_efficientnet/film_efficientnet_encoder.py:240-265", "hash": "3b518be886c5223368b9910a33b0a8ba", "title": "Input Shape Validator Function"}, "23": {"path": "/film_efficientnet/film_efficientnet_encoder.py:266-289", "hash": "95a7a606bfdabb58a9ae417cef1ee269", "title": "EfficientNet Shape and Weight Validator"}, "24": {"path": "/film_efficientnet/film_efficientnet_encoder.py:290-310", "hash": "0edd9f64fb2a3971766a2d7e3ef88642", "title": "Input Shape Validation in EfficientNet Encoder"}, "25": {"path": "/film_efficientnet/film_efficientnet_encoder.py:311-336", "hash": "c9130092292be5a6e00e0f5a0426814d", "title": "Input Shape Validation"}, "26": {"path": "/film_efficientnet/film_efficientnet_encoder.py:337-361", "hash": "e92c79132b77ed20c2a5705cae3bcd92", "title": "EfficientNet Customization Function"}, "27": {"path": "/film_efficientnet/film_efficientnet_encoder.py:362-377", "hash": "68fc4009f36fccdd3242b8f578ce5718", "title": "Efficient Film Encoder Model"}, "28": {"path": "/film_efficientnet/film_efficientnet_encoder.py:378-401", "hash": "cbf3b16cedc7ed4a36c4e2967d37d045", "title": "EfficientNet Model with Film Conditioning"}, "29": {"path": "/film_efficientnet/film_efficientnet_encoder.py:402-430", "hash": "5966f58c25cbbad779d73b7262ea4fdd", "title": "EfficientNet Model Initialization"}, "30": {"path": "/film_efficientnet/film_efficientnet_encoder.py:431-453", "hash": "c0e94183e07ec7c317959b969f9673fd", "title": "EfficientNet Filter Rounding"}, "31": {"path": "/film_efficientnet/film_efficientnet_encoder.py:454-482", "hash": "2a4c9b1876629c40683ae4abe9fb13c9", "title": "EfficientNet Model Initialization"}, "32": {"path": "/film_efficientnet/film_efficientnet_encoder.py:483-513", "hash": "1e8c80670b4b03f9bdba6587ac09604d", "title": "EfficientNet Encoder with Film Conditioning"}, "33": {"path": "/film_efficientnet/film_efficientnet_encoder.py:514-547", "hash": "76d3b79b913bdbfab8963670918fdb9d", "title": "Dense Layer Model Creation"}, "34": {"path": "/film_efficientnet/film_efficientnet_encoder.py:548-580", "hash": "0e16a55a96e08d04d9fe4e11e8d1a0b5", "title": "Inverted Residual Block Function"}, "35": {"path": "/film_efficientnet/film_efficientnet_encoder.py:582-617", "hash": "d1e775d4a4f7ce2b1e8f8f65bf4e5260", "title": "Squeeze-and-Excitation Depthwise CNN"}, "36": {"path": "/film_efficientnet/film_efficientnet_encoder.py:618-653", "hash": "f432fe8779f1d698a528a03b305ca7ff", "title": "Spatial Recalibration in EfficientNet Encoder"}, "37": {"path": "/film_efficientnet/film_efficientnet_encoder.py:654-683", "hash": "48f12f144bd3e84b9cf5ac108405332a", "title": "Film EfficientNet Dropout Models"}, "38": {"path": "/film_efficientnet/film_efficientnet_encoder.py:684-713", "hash": "ac7d356d31d212ab3f797a4e3f875571", "title": "EfficientNet Layer Weights Assigner"}, "39": {"path": "/film_efficientnet/film_efficientnet_encoder.py:714-740", "hash": "6f5fb910f5e91913676f1e91c40b9aed", "title": "EfficientNetB3 Model with Custom Options"}, "40": {"path": "/film_efficientnet/film_efficientnet_encoder.py:742-759", "hash": "20491142c2e35a4b037b2f9cb75d4011", "title": "Sorting and Storing Top Predictions"}, "41": {"path": "/film_efficientnet/film_efficientnet_encoder_test.py", "hash": "bddf624ae2f4a3802d42b0d4bac33e31", "title": "EfficientNet for Cat Detection"}, "42": {"path": "/film_efficientnet/film_efficientnet_encoder_test.py:1-28", "hash": "a0c5cd0cdd1d3ffc8e2fcd416049bb5f", "title": "EfficientNet Cat Detection Test"}, "43": {"path": "/film_efficientnet/film_efficientnet_encoder_test.py:29-57", "hash": "16c8139c26191a18e71194c11e60b83d", "title": "EfficientNet Model Variant Selector and Resizer"}, "44": {"path": "/film_efficientnet/film_efficientnet_encoder_test.py:58-73", "hash": "00bae2ae583d5277a70b0f1303960a97", "title": "EfficientNet Encoder Test: Keras vs. TF Equivalence"}, "45": {"path": "/film_efficientnet/preprocessors.py", "hash": "193ee2a124f3abc19941319d53c722e9", "title": "EfficientNet Preprocessing"}, "46": {"path": "/film_efficientnet/preprocessors.py:1-29", "hash": "9743d7fe62f133a36b9144c330c3b9b0", "title": "EfficientNet Image Preprocessing"}, "47": {"path": "/film_efficientnet/preprocessors.py:30-55", "hash": "a49a75dd018a9574dbc8e91609ff5b60", "title": "EfficientNet Preprocessors: Image Cropping and Conversion"}, "48": {"path": "/film_efficientnet/preprocessors.py:56-85", "hash": "7df26bbc1e35b64a88be12cdcf585add", "title": "Image Dimension Consistency Preprocessor"}, "49": {"path": "/film_efficientnet/preprocessors.py:86-107", "hash": "36f8a398c85c609c11de7f5bc69a4858", "title": "Random Cropping Preprocessor"}, "50": {"path": "/film_efficientnet/preprocessors.py:108-108", "hash": "bec28a81dadcb04d117d6c964b4edc5d", "title": "Preprocessed Images Returned"}, "51": {"path": "/film_efficientnet/preprocessors_test.py", "hash": "faf3850c297cdcd98fae9a994bebdfe4", "title": "EfficientNet Preprocessor Test"}, "52": {"path": "/film_efficientnet/preprocessors_test.py:1-29", "hash": "29255978d035429365585740041a1c75", "title": "Film EfficientNet Preprocessor Test Module"}, "53": {"path": "/film_efficientnet/preprocessors_test.py:30-54", "hash": "1fb0db872d7fc90f964e438a1c35480a", "title": "EfficientNet Image Preprocessor Test"}, "54": {"path": "/film_efficientnet/preprocessors_test.py:55-77", "hash": "620d5e464939ea650b09734e96ac2c58", "title": "Test Suite for Image Preprocessor"}, "55": {"path": "/film_efficientnet/preprocessors_test.py:78-83", "hash": "1320d79ee5d5f2e5735150d67b9709ca", "title": "EfficientNet Image Array Difference"}, "56": {"path": "/film_efficientnet/pretrained_efficientnet_encoder.py", "hash": "dcf177b4895710b1af90bbf38d51f54c", "title": "Pretrained EfficientNet Encoder for Film"}, "57": {"path": "/film_efficientnet/pretrained_efficientnet_encoder.py:1-34", "hash": "2d56828b54918a7233f6505538dbfd13", "title": "EfficientNet Encoder for Feature Extraction"}, "58": {"path": "/film_efficientnet/pretrained_efficientnet_encoder.py:36-57", "hash": "58527166053bb88fed4296eadd9166a4", "title": "Customizable Pretrained EfficientNet Encoder"}, "59": {"path": "/film_efficientnet/pretrained_efficientnet_encoder.py:58-84", "hash": "28f6530ae45058af021ac2bfe3b3796d", "title": "EfficientNetEncoder: Film-Conditioned Pretrained Model"}, "60": {"path": "/film_efficientnet/pretrained_efficientnet_encoder.py:85-107", "hash": "d6d8ed2542d51a33e545ebfc5ccfd3c7", "title": "EfficientNet Encoder for Image Processing"}, "61": {"path": "/film_efficientnet/pretrained_efficientnet_encoder.py:108-122", "hash": "58dc85100cd6716582089fe4d282f746", "title": "Pretrained EfficientNet Encoder Function"}, "62": {"path": "/film_efficientnet/pretrained_efficientnet_encoder_test.py", "hash": "f32e592eec16fe55a66ef097be9b9cc9", "title": "Testing EfficientNet Encoder with Cat Image"}, "63": {"path": "/film_efficientnet/pretrained_efficientnet_encoder_test.py:1-27", "hash": "f49f90dc1f6436e609e306580d435d0d", "title": "Pretrained EfficientNet Encoder Test"}, "64": {"path": "/film_efficientnet/pretrained_efficientnet_encoder_test.py:28-49", "hash": "1a534fd639c2455beecfc6ec24d728b9", "title": "EfficientNet Tabby Cat Classification"}, "65": {"path": "/requirements.txt", "hash": "e8d4236a3fb87ffda84a0f754bd37ced", "title": "Robotics Transformer Dependencies"}, "66": {"path": "/sequence_agent.py", "hash": "a1680fa30238fce8c42f25bb82b935d6", "title": "Sequence Agent & RL Training"}, "67": {"path": "/sequence_agent.py:1-26", "hash": "f1844a2a5bbaa26d00b21dc767e16fff", "title": "Sequence Policy and Agent in Sequence_agent.py"}, "68": {"path": "/sequence_agent.py:27-60", "hash": "1dc4bdbac55761b61de14a4bdf5e0b27", "title": "Sequence Policy Class"}, "69": {"path": "/sequence_agent.py:61-86", "hash": "70044696bb6b42e1d1ab6a9540516fa5", "title": "Sequence Agent: TF-Agent Extension"}, "70": {"path": "/sequence_agent.py:87-114", "hash": "662e3be57568549ca290ec809dcd5bab", "title": "Sequence Agent Initialization and Policies"}, "71": {"path": "/sequence_agent.py:115-140", "hash": "7dedfa9e9287da63ef4d1fe84a518d37", "title": "Training Actor Network with Experience and Weights"}, "72": {"path": "/sequence_agent.py:141-164", "hash": "a91834150e89ebc842c49aa4f05d3ba7", "title": "Gradient Applier for Reinforcement Learning Agent"}, "73": {"path": "/sequence_agent.py:165-171", "hash": "82d06c02c51bfbfe81fe92129d5cbc51", "title": "Actor Loss Calculation"}, "74": {"path": "/sequence_agent_test.py", "hash": "4a24cc13402543b4e2ba7e804d2498a3", "title": "Testing SequenceAgent with tf_agents Library"}, "75": {"path": "/sequence_agent_test_set_up.py", "hash": "190d695f5ebf368be83c8a298169ab34", "title": "Setting Up Sequence Agent Tests"}, "76": {"path": "/sequence_agent_test_set_up.py:1-28", "hash": "c4009009c3e1d26ebcd848811f7a2aa6", "title": "Setting Up Sequence Agent Tests"}, "77": {"path": "/sequence_agent_test_set_up.py:30-67", "hash": "073d922c1e076182502893fd7fd67485", "title": "Robotic Transformer Actor Agent"}, "78": {"path": "/sequence_agent_test_set_up.py:68-97", "hash": "d276972129808fc72f96d76cc5ac6614", "title": "SequenceAgent Test Setup"}, "79": {"path": "/sequence_agent_test_set_up.py:98-118", "hash": "62326a0d828daf45306dd154be49ff54", "title": "Sequence Agent Test Environment Setup"}, "80": {"path": "/sequence_agent_test_set_up.py:119-144", "hash": "2fd3e36240948ada1acb08f18ed00298", "title": "Saving Agent Policy in Test Set Up"}, "81": {"path": "/tokenizers/__init__.py", "hash": "8f07debfd5331809909e55b593ea5331", "title": "Apache License Notice for Tokenizers"}, "82": {"path": "/tokenizers/action_tokenizer.py", "hash": "b686aa6941ac072764cb1e679c339d76", "title": "Action Tokenization in Robotics Transformer Library"}, "83": {"path": "/tokenizers/action_tokenizer.py:1-25", "hash": "051f5837dc0455711b39e0d16147a112", "title": "Action Tokenizer: Robotics Transformer 1"}, "84": {"path": "/tokenizers/action_tokenizer.py:27-52", "hash": "71f2cb6e2827da89d6516d72def6177a", "title": "Action Tokenizer: Vocabulary-based Action Tokenization"}, "85": {"path": "/tokenizers/action_tokenizer.py:53-78", "hash": "9cf33bfaa801c764face5333f277b1c7", "title": "Action Tokenizer Initialization"}, "86": {"path": "/tokenizers/action_tokenizer.py:79-107", "hash": "a25cc64de8fa96e8c4717dfdf8e917b6", "title": "Action Tokenizer Validation"}, "87": {"path": "/tokenizers/action_tokenizer.py:108-127", "hash": "3dee9e629be603c85feb91685290284f", "title": "Action Tokenizer Algorithm"}, "88": {"path": "/tokenizers/action_tokenizer.py:129-151", "hash": "05c7d8ff5b9ddcffe03cb2900799938d", "title": "Action Detokenizer Function"}, "89": {"path": "/tokenizers/action_tokenizer.py:152-157", "hash": "f56ec22e149dc21d683d13e5014b909b", "title": "Action Tokenizer: Normalization and Concatenation"}, "90": {"path": "/tokenizers/action_tokenizer_test.py", "hash": "cada2a5f78cb54c1d47ca3d956285fc6", "title": "Action Tokenizer Test Accuracy"}, "91": {"path": "/tokenizers/action_tokenizer_test.py:1-27", "hash": "52f92673a4217778987324f6cdb660eb", "title": "Action Tokenizer Test: Int32 Action Specification"}, "92": {"path": "/tokenizers/action_tokenizer_test.py:28-47", "hash": "56f5b494fbc03761277652bc0a6e87d4", "title": "Action Tokenizer Test Cases"}, "93": {"path": "/tokenizers/action_tokenizer_test.py:48-64", "hash": "fbe6ace6db3e052370f0fdf76e80be23", "title": "Action Tokenizer Test: Detokenization and OOV Confirmation"}, "94": {"path": "/tokenizers/action_tokenizer_test.py:65-84", "hash": "e0da041466112a922bde9d9db033e3ad", "title": "Action Tokenizer Test: Correct Shape Assertion"}, "95": {"path": "/tokenizers/action_tokenizer_test.py:85-110", "hash": "e6da3cdcaba7482bf6d5b4f72b37c59c", "title": "Testing Action Tokenizer Boundaries"}, "96": {"path": "/tokenizers/action_tokenizer_test.py:111-143", "hash": "f16fe338fa082b24046ae10044fd559b", "title": "Action Tokenizer Test: Equality and Vocabulary Size Validation"}, "97": {"path": "/tokenizers/action_tokenizer_test.py:144-170", "hash": "4778fa1e98eb965e30c074c7e8439d2f", "title": "Action Tokenizer Test Accuracy"}, "98": {"path": "/tokenizers/action_tokenizer_test.py:171-191", "hash": "c678b5bdce0df4e6a46e40adf9624576", "title": "Random Action Tokenization in Robotics Test"}, "99": {"path": "/tokenizers/image_tokenizer.py", "hash": "05eac3416afb55234d09d6188f9b5ceb", "title": "EfficientNet Image Tokenizer"}, "100": {"path": "/tokenizers/image_tokenizer.py:1-27", "hash": "d464fb39a4256de6ee1e709de6a13e92", "title": "EfficientNet-Based Image Tokenizer"}, "101": {"path": "/tokenizers/image_tokenizer.py:28-60", "hash": "d9312cf538a9017559fa8edc9461faaf", "title": "ImageTokenizer: EfficientNet-Based Image Tokenization"}, "102": {"path": "/tokenizers/image_tokenizer.py:61-89", "hash": "31a63a21b86c0f076af96f13f872031c", "title": "Image Reshaping and Tokenization Function"}, "103": {"path": "/tokenizers/image_tokenizer.py:90-112", "hash": "f4f2b5a5862397ccc2c0b2bcb2bbfcff", "title": "Image Tokenizer Embeddings"}, "104": {"path": "/tokenizers/image_tokenizer_test.py", "hash": "8d60c682e27699b14839c849e283a5a3", "title": "Image Tokenizer Test: Generating Tokens and Validating Outputs"}, "105": {"path": "/tokenizers/image_tokenizer_test.py:1-26", "hash": "f9d0458467abd18c462137f593ddf7b5", "title": "Image Tokenizer Test: Robotics Transformer Library"}, "106": {"path": "/tokenizers/image_tokenizer_test.py:27-46", "hash": "6dfb0db20bf36fb3e207a8572d54ec09", "title": "Image Tokenizer Test: Shape Assertion"}, "107": {"path": "/tokenizers/token_learner.py", "hash": "142cbb6d0201d95a744164657eeaac35", "title": "TensorFlow Token Learner Implementation"}, "108": {"path": "/tokenizers/token_learner.py:1-30", "hash": "bcd70a7d40caff312085fdef1f6056c1", "title": "TensorFlow Token Learner Implementation"}, "109": {"path": "/tokenizers/token_learner.py:31-58", "hash": "3cfd06f2007d6660909bbcbb2a5005d8", "title": "MLP Transformer Block Creation"}, "110": {"path": "/tokenizers/token_learner.py:59-84", "hash": "245c75cc5dcc94f005cdb1c60c5997a3", "title": "Token Learner Layer Initialization"}, "111": {"path": "/tokenizers/token_learner.py:85-116", "hash": "2c09bdc64ebe4415a8a8382e0ff8405d", "title": "TokenLearnerModule: Transformer MlpBlock and Layer Normalization"}, "112": {"path": "/tokenizers/token_learner.py:118-128", "hash": "0005fa6710542535aa297926d75563c8", "title": "Feature Extraction Token Learner"}, "113": {"path": "/tokenizers/token_learner_test.py", "hash": "6d0b27977bb7087f47da606d66165869", "title": "TokenLearner Test: Robotics Transformer Embedding"}, "114": {"path": "/tokenizers/token_learner_test.py:1-29", "hash": "475036c16d217fb1b78f0df3a1e04449", "title": "TokenLearnerTest: Testing Tokenizers in Robotics Transformer"}, "115": {"path": "/tokenizers/token_learner_test.py:31-37", "hash": "fd24bc8c7cd1db5744a122c000f56204", "title": "Token Learner Test: Shape Matching"}, "116": {"path": "/transformer.py", "hash": "e36b3dae4edd40df76d171de867a9d6f", "title": "Configurable Transformer Layer with Multi-Head Attention"}, "117": {"path": "/transformer.py:1-32", "hash": "f4560732622f19b195bb721c3eb901db", "title": "Transformer Layer Definition"}, "118": {"path": "/transformer.py:33-57", "hash": "b66d385f01766738feb7b7d7b17ec4c7", "title": "Multi-Head Attention Transformer Layer"}, "119": {"path": "/transformer.py:58-85", "hash": "025acfe092ca7e85310ea2a8f3ac90b8", "title": "Multi-Head Attention Layer for Transformers"}, "120": {"path": "/transformer.py:86-117", "hash": "d1cd2f46520278d8c21a8aa557590799", "title": "Decoder Only Transformer Class"}, "121": {"path": "/transformer.py:118-143", "hash": "5c4e4c7dd4e0cfeab7734f13336a8c08", "title": "Transformer Model Initialization and Call Function"}, "122": {"path": "/transformer.py:144-169", "hash": "40fce07b573e102ad12dc7f2ef8e6e65", "title": "Transformer Model with Attention and Embeddings"}, "123": {"path": "/transformer_network.py", "hash": "34d2f6f740fb4a9138144b686f022b9f", "title": "Transformer Network for Robotics"}, "124": {"path": "/transformer_network.py:1-27", "hash": "6ff8ebbf3ebc536c2942f3025bae5153", "title": "Sequence Model Training with TensorFlow"}, "125": {"path": "/transformer_network.py:28-58", "hash": "5a8e25048e382cef48bb5068a3dfdfd2", "title": "Transformer Actor Network Definition"}, "126": {"path": "/transformer_network.py:59-76", "hash": "de5331fc5f308f1decc885faca408552", "title": "Training Transformer Network: Specs and Details"}, "127": {"path": "/transformer_network.py:77-103", "hash": "05f9f5f57f4492f07bc204323070f00f", "title": "Transformer Network Initialization"}, "128": {"path": "/transformer_network.py:104-129", "hash": "da5317bc7a99f0e97419c4223a3263ce", "title": "Transformer Network Initialization and Setup"}, "129": {"path": "/transformer_network.py:130-154", "hash": "ea124dafefb8b9a0c653beb0a8622e40", "title": "Transformer Network for Robotics Tasks"}, "130": {"path": "/transformer_network.py:156-184", "hash": "d58cc0f0c7b00cd5b9ceaa660b5b500c", "title": "Action Index and Mask Generation in Transformer Network"}, "131": {"path": "/transformer_network.py:185-207", "hash": "427409a4adc45b6f02e82f857f7a36f3", "title": "Transformer Network for Robotics: Action Masks and Look Ahead Masking"}, "132": {"path": "/transformer_network.py:208-237", "hash": "2aa3502061851502192755fea9b01f3b", "title": "Attention-masked Transformer Function"}, "133": {"path": "/transformer_network.py:238-263", "hash": "e66c0c600eee7e269bfd4e7a6b27ade2", "title": "Transformer Network for Images and Actions"}, "134": {"path": "/transformer_network.py:264-291", "hash": "a3cdb8271ddff34f6726cfb59f6e94c2", "title": "Transformer Network for Observations"}, "135": {"path": "/transformer_network.py:292-314", "hash": "cabe0aa1a9e0b0298d295644406b7442", "title": "Transformer Network Prediction Loop"}, "136": {"path": "/transformer_network.py:315-337", "hash": "cadd03d6248878f172933d66a5494a39", "title": "Action Token Concatenation"}, "137": {"path": "/transformer_network.py:338-356", "hash": "22531ab85f998394ffab7983d1b9e4a5", "title": "Transformer Network Robotics State Update"}, "138": {"path": "/transformer_network.py:357-383", "hash": "5149d9557ee82ec5bc6a91f8a9b8cbb5", "title": "Transformer Forward Pass: Action Prediction"}, "139": {"path": "/transformer_network.py:384-413", "hash": "51a8ac77d85a53c120215a22f152c39c", "title": "Transformer Network Robotics Action Loss"}, "140": {"path": "/transformer_network.py:414-437", "hash": "fc6ebd7091c68724e6ed098585baabd5", "title": "Tracking Transformer Network Parameters and Images"}, "141": {"path": "/transformer_network.py:438-459", "hash": "af9dc675f2cdda078d779764d03776d2", "title": "Attention-Aware Transformer Logging"}, "142": {"path": "/transformer_network.py:460-479", "hash": "9070832d76b91bbff8cf898a4e24f5dc", "title": "Spatial Attention Transformer Visualization"}, "143": {"path": "/transformer_network.py:480-500", "hash": "1217feda4777eb755620f245dd877dad", "title": "Attention Visualizer: Transformer Network Py Code"}, "144": {"path": "/transformer_network.py:501-521", "hash": "2284d3970ba465810b5c1feaf19fb89f", "title": "Accuracy Tracking for Transformer Network"}, "145": {"path": "/transformer_network.py:522-548", "hash": "5b48913db39ec105539907af45a41107", "title": "Token Accuracy and Loss Tracking"}, "146": {"path": "/transformer_network.py:549-575", "hash": "c2962462a8f1e56fd398ab5dee40d149", "title": "Image Tokenization Function"}, "147": {"path": "/transformer_network.py:576-597", "hash": "0d621e372cf4fc917b728b7b7bd86fea", "title": "Reshape and Prepare Images for Transformer Input"}, "148": {"path": "/transformer_network.py:598-618", "hash": "5895bb554ec7be9b5a5179cc480843b6", "title": "Image Tokenization and Action Shifting"}, "149": {"path": "/transformer_network.py:619-644", "hash": "cf05a13e2943e759c8133689e7aaec1a", "title": "Assemble Action Tokens into Input Sequence"}, "150": {"path": "/transformer_network.py:645-669", "hash": "b2bb966b0602b3372e5dcfb2d6788709", "title": "Three Functions for Transformer Network"}, "151": {"path": "/transformer_network.py:670-684", "hash": "fc52198197cbacbfde06b3681cfede85", "title": "Transformer Network Dimension Analysis Functions"}, "152": {"path": "/transformer_network_test.py", "hash": "789c0cde532fe63a3537ab2a793f10f0", "title": "Transformer Network Testing Framework"}, "153": {"path": "/transformer_network_test.py:1-22", "hash": "96087cd44a4a8149b275528b668091ee", "title": "Transformer Network Test File"}, "154": {"path": "/transformer_network_test.py:23-46", "hash": "4936f00301c1fc01f51f48dac6cf569e", "title": "Transformer Network Testing: Train Loss Call"}, "155": {"path": "/transformer_network_test.py:47-72", "hash": "14534c1676fa37e66f6a4d21b24ac2ca", "title": "Transformer Network Testing: Inference and Loss"}, "156": {"path": "/transformer_network_test.py:73-99", "hash": "101a9b83a8d9c2e7c9654cf085df94f0", "title": "Transformer Network Testing and Evaluation"}, "157": {"path": "/transformer_network_test.py:100-127", "hash": "ab4a82dd73231893bc2b3a021107dc37", "title": "Transformer Network Initialization and Testing"}, "158": {"path": "/transformer_network_test.py:128-152", "hash": "6abb038ee50f90f90c0d3de1c7dbdb27", "title": "Transformer Network Testing: Input-Output Specifications"}, "159": {"path": "/transformer_network_test.py:153-177", "hash": "d48736830a27ba62da739c45c2985847", "title": "Transformer Network Image and Action Tokenization"}, "160": {"path": "/transformer_network_test.py:178-200", "hash": "8b42ebddd55ca3c88749dc97d3ea411e", "title": "Future-Input Independence Test"}, "161": {"path": "/transformer_network_test.py:202-228", "hash": "2ecc993b3da28d9ca83792c9ec2e5b7e", "title": "Testing Loss Masks in Agent"}, "162": {"path": "/transformer_network_test.py:229-229", "hash": "0337ab64ba882c1f697f0663b5a6b7c8", "title": "Invoking TensorFlow Test Functions"}, "163": {"path": "/transformer_network_test_set_up.py", "hash": "7f9c5374a06a487f138e8dded1709b2c", "title": "Transformer Network Test Setup"}, "164": {"path": "/transformer_network_test_set_up.py:1-30", "hash": "f03e8120b48ee0e77c5cbde8e8b6a9cc", "title": "Transformer Test Setup"}, "165": {"path": "/transformer_network_test_set_up.py:31-55", "hash": "bacfc1db5a4f6b16844a03cb9062498f", "title": "Defining Spec Types and Constants"}, "166": {"path": "/transformer_network_test_set_up.py:56-89", "hash": "c3baffafcaeab12a563566b976d4b316", "title": "Transformer Network Setup and Observations"}, "167": {"path": "/transformer_network_test_set_up.py:90-118", "hash": "fd1926fa44a9604505ea8fa0a67bb4a8", "title": "FakeImageTokenizer Setup"}, "168": {"path": "/transformer_network_test_set_up.py:119-143", "hash": "5e395f4413494980b3b38afece1f9efe", "title": "Setting Up Image Processing Transformer"}, "169": {"path": "/transformer_network_test_set_up.py:144-166", "hash": "6a659b9f95b33e1e0bda3e49038bed19", "title": "Transformer Network Test Utilities"}, "170": {"path": "/transformer_network_test_set_up.py:167-196", "hash": "411508f89a3b20e1254080b2f3de2c70", "title": "Robotics Transformer Network Specifications"}, "171": {"path": "/transformer_network_test_set_up.py:197-223", "hash": "d0c8b076be324b80aa9b6e44b73d6cdd", "title": "Robotics Transformer Network Data Types Defined"}, "172": {"path": "/transformer_network_test_set_up.py:224-252", "hash": "742450f7c189ba5c799eb2a9a350ca08", "title": "Transformer Network Test Data Setup"}, "173": {"path": "/transformer_network_test_set_up.py:253-279", "hash": "00eddaba998c051bdf699009838ec32d", "title": "Training Action Setup for Transformer Network"}, "174": {"path": "/transformer_network_test_set_up.py:280-306", "hash": "1830b3f609773f59ffade7a6b73f85fe", "title": "Transformer Network Test Setup"}, "175": {"path": "/transformer_network_test_set_up.py:307-335", "hash": "e26245f5bb34ef877a3cab41f9970158", "title": "Transformer Network Token Reshaping"}, "176": {"path": "/transformer_network_test_set_up.py:336-359", "hash": "2883c92e5cef9ac063465fbcde58606d", "title": "Transformer Network Test Environment Setup"}, "177": {"path": "/transformer_network_test_set_up.py:360-379", "hash": "ce6e5a66e2c9dca30e77d77382aad5a3", "title": "Transformer Network Action Dimension Test"}, "178": {"path": "/transformer_network_test_set_up.py:380-391", "hash": "0cafc03eb1503cbb6e6a25fad25e8c78", "title": "Updating Output Tokens with Action Logits"}, "179": {"path": "/transformer_test.py", "hash": "8eb3ca2db27d7f699488f7743fab6980", "title": "Transformer Test in Robotics"}, "180": {"path": "/transformer_test.py:1-32", "hash": "3fb1cff068c7f0cd173bc4a9382cd108", "title": "Robotic Transformer Model Testing"}, "181": {"path": "/transformer_test.py:34-55", "hash": "d2bb857be336ad0fe9b89b3d442e53b9", "title": "Testing Transformer Forward Pass with Attention"}}}