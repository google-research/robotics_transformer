{
    "summary": "This function preprocesses images for training, converting data types and cropping while maintaining consistent dimensions to avoid distortions in deep learning models. The code returns the preprocessed images after transformations and resizing.",
    "details": [
        {
            "comment": "This code defines a function that performs image preprocessing for training, including converting the image data type and cropping the images to a specified size. The function takes in an input image(s) and optional parameters such as crop size, whether it's being used for training, and whether to pad before cropping.",
            "location": "\"/media/root/Prima/works/robotics_transformer/docs/src/film_efficientnet/preprocessors.py\":0-28",
            "content": "# Copyright 2022 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Preprocessing functions for transforming the image for training.\"\"\"\nfrom typing import Optional\nimport gin\nimport tensorflow.compat.v2 as tf\nCROP_SIZE = 472\n@gin.configurable(\n    denylist=['images', 'crop_size', 'training', 'convert_dtype', 'seed'])\ndef convert_dtype_and_crop_images(images,\n                                  crop_size: int = CROP_SIZE,\n                                  training: bool = True,\n                                  pad_then_crop: bool = False,"
        },
        {
            "comment": "This function takes in uint8 images, converts them to float32, and squares crops. It accepts parameters like crop size, if it's for training or not, pad_then_crop flag, and optional seed for randomness. The output is a tensor of float32 images in the shape [B, crop_size, crop_size, 3].",
            "location": "\"/media/root/Prima/works/robotics_transformer/docs/src/film_efficientnet/preprocessors.py\":29-54",
            "content": "                                  convert_dtype: bool = True,\n                                  seed: Optional[tf.Tensor] = None):\n  \"\"\"Convert uint8 [512, 640, 3] images to float32 and square crop.\n  Args:\n    images: [B, H, W, 3] uint8 tensor of images.\n    crop_size: Width of the square crop.\n    training: If we are in training (random crop) or not-training (fixed crop).\n    pad_then_crop: If True, pads image and then crops the original image size.\n      This allows full field of view to be extracted.\n    convert_dtype: whether or not to convert the image to float32 in the range\n      of (0, 1).\n    seed: Optional seed of shape (2,) for giving to tf.random.stateless_uniform\n  Returns:\n    [B, crop_size, crop_size, 3] images of dtype float32.\n  \"\"\"\n  if seed is None:\n    seed = tf.random.uniform(shape=(2,), maxval=2**30, dtype=tf.int32)\n  seed2 = tf.random.experimental.stateless_split(seed, num=1)[0]\n  if convert_dtype:\n    images = tf.image.convert_image_dtype(images, tf.float32)\n  image_height = images.get_shape().as_list()[-3]"
        },
        {
            "comment": "This code preprocesses images for a model. It first gets the image width, then checks if it should pad and crop the image before resizing it to the target height and width by padding with random offsets. This is useful for maintaining consistent image dimensions and avoiding distortions in deep learning models.",
            "location": "\"/media/root/Prima/works/robotics_transformer/docs/src/film_efficientnet/preprocessors.py\":55-84",
            "content": "  image_width = images.get_shape().as_list()[-2]\n  if pad_then_crop:\n    if training:\n      if image_height == 512:\n        ud_pad = 40\n        lr_pad = 100\n      elif image_height == 256:\n        ud_pad = 20\n        lr_pad = 50\n      else:\n        raise ValueError(\n            'convert_dtype_and_crop_images only supports image height 512 or '\n            '256.')\n      max_y = 2 * ud_pad\n      max_x = 2 * lr_pad\n      images = tf.image.pad_to_bounding_box(\n          images,\n          offset_height=ud_pad,\n          offset_width=lr_pad,\n          target_height=image_height + 2 * ud_pad,\n          target_width=image_width + 2 * lr_pad)\n      offset_y = tf.random.stateless_uniform((),\n                                             maxval=max_y + 1,\n                                             dtype=tf.int32,\n                                             seed=seed)\n      offset_x = tf.random.stateless_uniform((),\n                                             maxval=max_x + 1,\n                                             dtype=tf.int32,"
        },
        {
            "comment": "This code performs random cropping on images during training and standard centric cropping during inference. It generates random offset values within the image boundaries using a seed for reproducibility, then crops the images accordingly.",
            "location": "\"/media/root/Prima/works/robotics_transformer/docs/src/film_efficientnet/preprocessors.py\":85-106",
            "content": "                                             seed=seed2)\n      images = tf.image.crop_to_bounding_box(images, offset_y, offset_x,\n                                             image_height, image_width)\n  else:\n    # Standard cropping.\n    max_y = image_height - crop_size\n    max_x = image_width - crop_size\n    if training:\n      offset_y = tf.random.stateless_uniform((),\n                                             maxval=max_y + 1,\n                                             dtype=tf.int32,\n                                             seed=seed)\n      offset_x = tf.random.stateless_uniform((),\n                                             maxval=max_x + 1,\n                                             dtype=tf.int32,\n                                             seed=seed2)\n      images = tf.image.crop_to_bounding_box(images, offset_y, offset_x,\n                                             crop_size, crop_size)\n    else:\n      images = tf.image.crop_to_bounding_box(images, max_y // 2, max_x // 2,\n                                             crop_size, crop_size)"
        },
        {
            "comment": "This code snippet is returning the preprocessed images after applying transformations and resizing.",
            "location": "\"/media/root/Prima/works/robotics_transformer/docs/src/film_efficientnet/preprocessors.py\":107-107",
            "content": "  return images"
        }
    ]
}