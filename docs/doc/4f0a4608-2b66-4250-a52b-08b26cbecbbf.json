{
    "summary": "The code tests a 'film_efficientnet' model to detect cats using TensorFlow and skimage. It compares Keras and TF models with EfficientNet encoder for preprocessing and asserts if 'tabby' is in results.",
    "details": [
        {
            "comment": "Code snippet is a test file for testing if the film_efficientnet model can detect an image of a cat. It uses TensorFlow, skimage, and includes a helper function to run tests with different model variants (e.g., 'b0') and sizes (e.g., 224).",
            "location": "\"/media/root/Prima/works/robotics_transformer/docs/src/film_efficientnet/film_efficientnet_encoder_test.py\":0-27",
            "content": "# Copyright 2022 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Tests that film_efficientnet can detect an image of a cat.\"\"\"\nfrom absl.testing import parameterized\nimport numpy as np\nfrom robotics_transformer.film_efficientnet import film_efficientnet_encoder\nfrom skimage import data\nimport tensorflow as tf\nclass FilmEfficientnetTest(tf.test.TestCase, parameterized.TestCase):\n  def _helper(self, include_film, model_variant):\n    if model_variant == 'b0':\n      size = 224\n      fe = film_efficientnet_encoder.EfficientNetB0"
        },
        {
            "comment": "This code selects a specific EfficientNet model variant based on the provided 'model_variant' and sets its size accordingly. It then initializes the model with the specified parameters ('include_top', 'weights', 'include_film') and resizes the input image to match the selected model's size. If 'include_film' is True, it generates a random context vector and passes it along with the image to the model for processing.",
            "location": "\"/media/root/Prima/works/robotics_transformer/docs/src/film_efficientnet/film_efficientnet_encoder_test.py\":28-56",
            "content": "    elif model_variant == 'b1':\n      size = 240\n      fe = film_efficientnet_encoder.EfficientNetB1\n    elif model_variant == 'b2':\n      size = 260\n      fe = film_efficientnet_encoder.EfficientNetB2\n    elif model_variant == 'b3':\n      size = 300\n      fe = film_efficientnet_encoder.EfficientNetB3\n    elif model_variant == 'b4':\n      size = 380\n      fe = film_efficientnet_encoder.EfficientNetB4\n    elif model_variant == 'b5':\n      size = 456\n      fe = film_efficientnet_encoder.EfficientNetB5\n    elif model_variant == 'b6':\n      size = 528\n      fe = film_efficientnet_encoder.EfficientNetB6\n    elif model_variant == 'b7':\n      size = 600\n      fe = film_efficientnet_encoder.EfficientNetB7\n    else:\n      raise ValueError(f'Unknown variant: {model_variant}')\n    fe = fe(include_top=True, weights='imagenet', include_film=include_film)\n    image = np.expand_dims(data.chelsea(), axis=0)\n    image = tf.image.resize(image, (size, size))\n    context = np.random.randn(1, 512)\n    if include_film:\n      eff_output = fe("
        },
        {
            "comment": "This code tests the equivalence between Keras and TF models using EfficientNet encoder for image preprocessing, decoding predictions and asserting if 'tabby' is included in results.",
            "location": "\"/media/root/Prima/works/robotics_transformer/docs/src/film_efficientnet/film_efficientnet_encoder_test.py\":57-72",
            "content": "          (film_efficientnet_encoder.preprocess_input(image), context),\n          training=False)\n    else:\n      eff_output = fe(\n          film_efficientnet_encoder.preprocess_input(image), training=False)\n    film_preds = film_efficientnet_encoder.decode_predictions(\n        eff_output.numpy(), top=10)\n    self.assertIn('tabby', [f[1] for f in film_preds[0]])\n  @parameterized.parameters([True, False])\n  def test_keras_equivalence_b3(self, include_film):\n    self._helper(include_film, 'b3')\nif __name__ == '__main__':\n  tf.test.main()"
        }
    ]
}