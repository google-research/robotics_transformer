{
    "summary": "This code tests the `convert_dtype_and_crop_images` function in a robotics_transformer package, ensuring correct dtype, image values range, and consistency in crop results for seeded and unseeded runs.",
    "details": [
        {
            "comment": "The code is part of a testing module for preprocessors in the robotics_transformer/film_efficientnet package. It contains utility functions like _random_image and _get_features for generating images and retrieving features, with optional use of task image or goal image.",
            "location": "\"/media/root/Prima/works/robotics_transformer/docs/src/film_efficientnet/preprocessors_test.py\":0-28",
            "content": "# Copyright 2022 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Tests for preprocessors.\"\"\"\nfrom absl.testing import parameterized\nimport numpy as np\nfrom robotics_transformer.film_efficientnet import preprocessors\nfrom tensor2robot.utils import tensorspec_utils\nimport tensorflow.compat.v2 as tf\ndef _random_image(shape):\n  images = tf.random.uniform(\n      shape, minval=0, maxval=255, dtype=tf.dtypes.int32, seed=42)\n  return tf.cast(images, tf.uint8)\ndef _get_features(\n    image_shape=(2, 512, 640, 3), use_task_image=False, use_goal_image=False):"
        },
        {
            "comment": "The code defines a function `convert_dtype_and_crop_images` that takes an image array and modifies its shape based on three parameters: training mode, pad-then-crop method, and dtype conversion. The function returns the modified image with a specific expected cropped shape depending on the parameters. The code also includes a test case `PreprocessorsTest` which tests the function for different combinations of these parameters.",
            "location": "\"/media/root/Prima/works/robotics_transformer/docs/src/film_efficientnet/preprocessors_test.py\":29-53",
            "content": "  # Time-dimension stacking occurs during training but not eval.\n  state = tensorspec_utils.TensorSpecStruct(image=_random_image(image_shape))\n  if use_task_image:\n    state.task_image = _random_image(image_shape)\n  if use_goal_image:\n    state.goal_image = _random_image(image_shape)\n  return state\nclass PreprocessorsTest(tf.test.TestCase, parameterized.TestCase):\n  @parameterized.parameters((True, False, False), (False, True, False),\n                            (True, False, True), (False, True, True))\n  def testConvertDtypeAndCropImages(self, training, pad_then_crop,\n                                    convert_dtype):\n    features = _get_features()\n    images = preprocessors.convert_dtype_and_crop_images(\n        features.image,\n        training=training,\n        pad_then_crop=pad_then_crop,\n        convert_dtype=convert_dtype)\n    expected_cropped_shape = ([2, 512, 640, 3]\n                              if pad_then_crop else [2, 472, 472, 3])\n    tf.ensure_shape(images, expected_cropped_shape)\n    if convert_dtype:"
        },
        {
            "comment": "This code segment contains three test functions for the `convert_dtype_and_crop_images` function. It checks if the dtype of the images is correct, if image values are within expected range, and ensures that crop results from seeded and unseeded runs are almost equal to ensure consistent and repeatable results.",
            "location": "\"/media/root/Prima/works/robotics_transformer/docs/src/film_efficientnet/preprocessors_test.py\":54-76",
            "content": "      self.assertEqual(images.dtype, tf.float32)\n      self.assertLessEqual(images.numpy().max(), 1.)\n      self.assertGreaterEqual(images.numpy().min(), 0.)\n    else:\n      self.assertEqual(images.dtype, tf.uint8)\n      self.assertLessEqual(images.numpy().max(), 255)\n      self.assertGreaterEqual(images.numpy().min(), 0)\n      self.assertGreater(images.numpy().max(), 1)\n  def testConvertDtypeAndCropImagesSeeded(self):\n    features = _get_features()\n    seed = tf.constant([1, 2], tf.int32)\n    images1 = preprocessors.convert_dtype_and_crop_images(\n        features.image, training=True, pad_then_crop=True, seed=seed)\n    images2 = preprocessors.convert_dtype_and_crop_images(\n        features.image, training=True, pad_then_crop=True, seed=seed)\n    diff = np.sum(np.abs(images1.numpy() - images2.numpy()))\n    self.assertAlmostEqual(diff, 0)\n  def testConvertDtypeAndCropImagesUnseeded(self):\n    features = _get_features()\n    seed1 = tf.constant([1, 2], tf.int32)\n    images1 = preprocessors.convert_dtype_and_crop_images("
        },
        {
            "comment": "This code segment initializes two image arrays, images1 and images2, by calling the preprocessors.convert_dtype_and_crop_images() function with different random seeds for padding and cropping. Then, it calculates the difference between the two resulting arrays using np.sum(np.abs()) and asserts that they are not equal to zero.",
            "location": "\"/media/root/Prima/works/robotics_transformer/docs/src/film_efficientnet/preprocessors_test.py\":77-82",
            "content": "        features.image, training=True, pad_then_crop=True, seed=seed1)\n    seed2 = tf.constant([2, 3], tf.int32)\n    images2 = preprocessors.convert_dtype_and_crop_images(\n        features.image, training=True, pad_then_crop=True, seed=seed2)\n    diff = np.sum(np.abs(images1.numpy() - images2.numpy()))\n    self.assertNotAlmostEqual(diff, 0)"
        }
    ]
}