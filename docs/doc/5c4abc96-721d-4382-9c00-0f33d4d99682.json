{
    "summary": "The code sets up tests for SequenceAgent in robotics transformer model, initializes agent and policy saver, creates time step specifications, defines action and state specifications, and tracks training steps.",
    "details": [
        {
            "comment": "This code sets up test functions for the \"sequence_agent\" in the \"robotics_transformer\" package. It defines a DummyActorNet class, which is used to test SequenceAgent and its subclasses. The code also imports necessary libraries and modules such as TensorFlow, tf-agents, and numpy.",
            "location": "\"/media/root/Prima/works/robotics_transformer/docs/src/sequence_agent_test_set_up.py\":0-27",
            "content": "# Copyright 2022 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Tests for sequence_agent.\"\"\"\nfrom typing import Type\nimport numpy as np\nfrom robotics_transformer import sequence_agent\nfrom tensor2robot.utils import tensorspec_utils\nimport tensorflow as tf\nfrom tf_agents.networks import network\nfrom tf_agents.policies import policy_saver\nfrom tf_agents.specs import tensor_spec\nfrom tf_agents.trajectories import time_step as ts\nclass DummyActorNet(network.Network):\n  \"\"\"Used for testing SequenceAgent and its subclass.\"\"\""
        },
        {
            "comment": "This code defines a class for an agent used in robotics transformer, with properties such as tokens_per_action and trainable_weights. It has methods to set actions, calculate actor loss, and handle observations and network states during training or execution. The class also supports setting actions and retrieving actor loss values.",
            "location": "\"/media/root/Prima/works/robotics_transformer/docs/src/sequence_agent_test_set_up.py\":29-66",
            "content": "  def __init__(self,\n               output_tensor_spec=None,\n               train_step_counter=None,\n               policy_info_spec=None,\n               time_sequence_length=1,\n               use_tcl=False,\n               **kwargs):\n    super().__init__(**kwargs)\n  @property\n  def tokens_per_action(self):\n    return 8\n  def set_actions(self, actions):\n    self._actions = actions\n  def get_actor_loss(self):\n    return self._actor_loss\n  def call(self,\n           observations,\n           step_type,\n           network_state,\n           actions=None,\n           training=False):\n    del step_type\n    image = observations['image']\n    tf.expand_dims(tf.reduce_mean(image, axis=-1), -1)\n    actions = tensorspec_utils.TensorSpecStruct(\n        world_vector=tf.constant(1., shape=[1, 3]),\n        rotation_delta=tf.constant(1., shape=[1, 3]),\n        terminate_episode=tf.constant(1, shape=[1, 2]),\n        gripper_closedness_action=tf.constant(1., shape=[1, 1]),\n    )\n    return actions, network_state\n  @property\n  def trainable_weights(self):"
        },
        {
            "comment": "The code defines a test set up for the SequenceAgent class and its subclasses. It sets up the action specification, including world vector, rotation delta, gripper closedness action, and terminate episode specifications, as well as a state specification with an image tensor of size [256, 320, 3]. The test set up also includes a variable initialized to 1.0.",
            "location": "\"/media/root/Prima/works/robotics_transformer/docs/src/sequence_agent_test_set_up.py\":67-96",
            "content": "    return [tf.Variable(1.0)]\nclass SequenceAgentTestSetUp(tf.test.TestCase):\n  \"\"\"Defines spec for testing SequenceAgent and its subclass, tests create.\"\"\"\n  def setUp(self):\n    super().setUp()\n    self._action_spec = tensorspec_utils.TensorSpecStruct()\n    self._action_spec.world_vector = tensor_spec.BoundedTensorSpec(\n        (3,), dtype=tf.float32, minimum=-1., maximum=1., name='world_vector')\n    self._action_spec.rotation_delta = tensor_spec.BoundedTensorSpec(\n        (3,),\n        dtype=tf.float32,\n        minimum=-np.pi / 2,\n        maximum=np.pi / 2,\n        name='rotation_delta')\n    self._action_spec.gripper_closedness_action = tensor_spec.BoundedTensorSpec(\n        (1,),\n        dtype=tf.float32,\n        minimum=-1.,\n        maximum=1.,\n        name='gripper_closedness_action')\n    self._action_spec.terminate_episode = tensor_spec.BoundedTensorSpec(\n        (2,), dtype=tf.int32, minimum=0, maximum=1, name='terminate_episode')\n    state_spec = tensorspec_utils.TensorSpecStruct()\n    state_spec.image = tensor_spec.BoundedTensorSpec([256, 320, 3],"
        },
        {
            "comment": "The code sets up a test environment for the sequence agent in a robotics transformer model. It defines the image and natural language embedding tensor specifications, creates a time step specification, and initializes the agent with the specified actor network and optimizer. The train_step_counter keeps track of training steps.",
            "location": "\"/media/root/Prima/works/robotics_transformer/docs/src/sequence_agent_test_set_up.py\":97-117",
            "content": "                                                     dtype=tf.float32,\n                                                     name='image',\n                                                     minimum=0.,\n                                                     maximum=1.)\n    state_spec.natural_language_embedding = tensor_spec.TensorSpec(\n        shape=[512], dtype=tf.float32, name='natural_language_embedding')\n    self._time_step_spec = ts.time_step_spec(observation_spec=state_spec)\n    self.sequence_agent_cls = sequence_agent.SequenceAgent\n  def create_agent_and_initialize(self,\n                                  actor_network: Type[\n                                      network.Network] = DummyActorNet,\n                                  **kwargs):\n    \"\"\"Creates the agent and initialize it.\"\"\"\n    agent = self.sequence_agent_cls(\n        time_step_spec=self._time_step_spec,\n        action_spec=self._action_spec,\n        actor_network=actor_network,\n        actor_optimizer=tf.keras.optimizers.Adam(),\n        train_step_counter=tf.compat.v1.train.get_or_create_global_step(),"
        },
        {
            "comment": "The code creates an agent and saves its policy using PolicySaver. It initializes the policy saver with a train step variable, specifies save options, and saves the policy model to '/tmp/unittest/policy/0'.",
            "location": "\"/media/root/Prima/works/robotics_transformer/docs/src/sequence_agent_test_set_up.py\":118-143",
            "content": "        **kwargs)\n    agent.initialize()\n    return agent\n  def testCreateAgent(self):\n    \"\"\"Creates the Agent and save the agent.policy.\"\"\"\n    agent = self.create_agent_and_initialize()\n    self.assertIsNotNone(agent.policy)\n    policy_model_saver = policy_saver.PolicySaver(\n        agent.policy,\n        train_step=tf.compat.v2.Variable(\n            0,\n            trainable=False,\n            dtype=tf.int64,\n            aggregation=tf.VariableAggregation.ONLY_FIRST_REPLICA,\n            shape=()),\n        input_fn_and_spec=None)\n    save_options = tf.saved_model.SaveOptions(\n        experimental_io_device='/job:localhost',\n        experimental_custom_gradients=False)\n    policy_model_saver.save('/tmp/unittest/policy/0', options=save_options)\nif __name__ == '__main__':\n  tf.test.main()"
        }
    ]
}